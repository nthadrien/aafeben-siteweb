@model Aafeben.Models.PublicationModel

@{
    ViewData["Title"] = "Publication";
    ViewData["Description"] = Model.Title;
}

<main style="max-width: 960px;" class="py-4 container mx-auto lh-2 project-page">

    <section class="d-flex flex-wrap gap-3 align-items-center justify-content-between my-3 text-capitalize small text-muted border-bottom pb-3">

        <div>
            <h1 class="my-3 text-capitalize">@Html.DisplayFor(model => model.Title)</h1>
             <span>@Localizer["when"] : @Model.PublishedDate.ToLongDateString()</span>
        </div>

        <a id="download" class="btn btn-success btn-sm" href="/images/publications/@Model.Content" download>
            <i class="bi bi-file-earmark-pdf-fill me-1"></i>
            @Localizer["download"]
        </a>
    </section>

    <section class="py-4 overflow-x-auto content-wrapper">
      <embed style="overflow:hidden; min-height: 60vh;"  src="/images/publications/@Model.Content" width="100%" type="application/pdf">
    </section>

    <hr class="container mx-auto"/>

    
    <a class="btn" id="go-back">
        <i class="bi bi-chevron-left small"></i> 
        @Localizer["back"] 
    </a>
</main>

<style>
    #header-hero {
        background: rgba(0, 0, 0, 0.5) url("../../images/website/publications-hero.jpg") no-repeat center;
        background-size: cover;
        background-blend-mode: darken;
    }

    table {
        width: 100% !important;
    }

    @@media screen and (max-width: 680px)  {
        table:has(img) {
            & tr {
                display: grid;
                grid-template-columns : repeat( auto-fill, min(max(340px, 45%), 100%)) !important;
            }

            & td {
                width: 200% !important;
            }
        } 
    }
    
</style>


<script src="//mozilla.github.io/pdf.js/build/pdf.mjs" type="module"></script>

<script type="module">
  // If absolute URL from the remote server is provided, configure the CORS
  // header on that server.
 // var url = 'https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/web/compressed.tracemonkey-pldi-09.pdf';
 const url = "~/images/publications/73c1730f-e862-4983-a242-e21d1531d26e.pdf";

  // Loaded via <script> tag, create shortcut to access PDF.js exports.
  var { pdfjsLib } = globalThis;

  // The workerSrc property shall be specified.
  pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.mjs';

  var pdfDoc = null,
      pageNum = 1,
      pageRendering = false,
      pageNumPending = null,
      scale = 0.8,
      canvas = document.getElementById('the-canvas'),
      ctx = canvas.getContext('2d');

  /**
   * Get page info from document, resize canvas accordingly, and render page.
   * param num Page number.
   */
  function renderPage(num) {
    pageRendering = true;
    // Using promise to fetch the page
    pdfDoc.getPage(num).then(function(page) {
      var viewport = page.getViewport({scale: scale});
      canvas.height = viewport.height;
      canvas.width = viewport.width;

      // Render PDF page into canvas context
      var renderContext = {
        canvasContext: ctx,
        viewport: viewport
      };
      var renderTask = page.render(renderContext);

      // Wait for rendering to finish
      renderTask.promise.then(function() {
        pageRendering = false;
        if (pageNumPending !== null) {
          // New page rendering is pending
          renderPage(pageNumPending);
          pageNumPending = null;
        }
      });
    });

    // Update page counters
    document.getElementById('page_num').textContent = num;
  }

  /**
   * If another page rendering in progress, waits until the rendering is
   * finised. Otherwise, executes rendering immediately.
   */
  function queueRenderPage(num) {
    if (pageRendering) {
      pageNumPending = num;
    } else {
      renderPage(num);
    }
  }

  /**
   * Displays previous page.
   */
  function onPrevPage() {
    if (pageNum <= 1) {
      return;
    }
    pageNum--;
    queueRenderPage(pageNum);
  }
  document.getElementById('prev').addEventListener('click', onPrevPage);

  /**
   * Displays next page.
   */
  function onNextPage() {
    if (pageNum >= pdfDoc.numPages) {
      return;
    }
    pageNum++;
    queueRenderPage(pageNum);
  }
  document.getElementById('next').addEventListener('click', onNextPage);

  /**
   * Asynchronously downloads PDF.
   */
  pdfjsLib.getDocument(url).promise.then(function(pdfDoc_) {
    pdfDoc = pdfDoc_;
    document.getElementById('page_count').textContent = pdfDoc.numPages;

    // Initial/first page rendering
    renderPage(pageNum);
  });
</script>

<h1>PDF.js Previous/Next example</h1>

<p>Please use <a href="https://mozilla.github.io/pdf.js/getting_started/#download"><i>official releases</i></a> in production environments.</p>

<div>
  <button id="prev">Previous</button>
  <button id="next">Next</button>
  &nbsp; &nbsp;
  <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
</div>

<canvas class="bg-danger" id="the-canvas"></canvas>
